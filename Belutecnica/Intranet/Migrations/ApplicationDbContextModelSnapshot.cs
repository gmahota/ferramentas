// <auto-generated />
using System;
using Intranet.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Intranet.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Intranet.Models.Stock.Artigo", b =>
                {
                    b.Property<string>("artigo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(48);

                    b.Property<string>("armazem")
                        .HasMaxLength(10);

                    b.Property<string>("codbarrasartigo")
                        .HasMaxLength(30);

                    b.Property<string>("descricao")
                        .HasMaxLength(50);

                    b.Property<double>("stkActual");

                    b.HasKey("artigo");

                    b.ToTable("Artigos");
                });

            modelBuilder.Entity("Intranet.Models.Stock.CabecStock", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("areaNegocio")
                        .HasMaxLength(15);

                    b.Property<string>("armazem")
                        .HasMaxLength(10);

                    b.Property<DateTime>("data");

                    b.Property<string>("entradaSaida")
                        .HasMaxLength(5);

                    b.Property<string>("funcionario")
                        .HasMaxLength(20);

                    b.Property<bool>("integradoErp");

                    b.Property<string>("localizacao")
                        .HasMaxLength(10);

                    b.Property<string>("nome")
                        .HasMaxLength(50);

                    b.Property<string>("notas");

                    b.Property<string>("nrDocExterno")
                        .HasMaxLength(10);

                    b.Property<int>("numDoc");

                    b.Property<string>("projecto")
                        .HasMaxLength(15);

                    b.Property<string>("serie")
                        .HasMaxLength(10);

                    b.Property<int>("status");

                    b.Property<string>("tipodoc")
                        .HasMaxLength(5);

                    b.HasKey("id");

                    b.HasIndex("tipodoc");

                    b.ToTable("CabecStock");
                });

            modelBuilder.Entity("Intranet.Models.Stock.Filial", b =>
                {
                    b.Property<string>("filialId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38);

                    b.Property<string>("cidade")
                        .HasMaxLength(30);

                    b.Property<DateTime>("dataCriacao");

                    b.Property<string>("descricao")
                        .HasMaxLength(50);

                    b.Property<string>("morada1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("morada2")
                        .HasMaxLength(50);

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("pais")
                        .HasMaxLength(30);

                    b.Property<bool>("porDefeito");

                    b.Property<string>("provincia")
                        .HasMaxLength(30);

                    b.HasKey("filialId");

                    b.ToTable("Filial");
                });

            modelBuilder.Entity("Intranet.Models.Stock.Funcionarios", b =>
                {
                    b.Property<string>("codigo")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("cdu_CodigoBarras");

                    b.Property<string>("nome");

                    b.HasKey("codigo");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("Intranet.Models.Stock.LinhasStock", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CabecStockId");

                    b.Property<string>("areaNegocio")
                        .HasMaxLength(15);

                    b.Property<string>("artigo")
                        .HasMaxLength(48);

                    b.Property<string>("codbarrasCabec")
                        .HasMaxLength(30);

                    b.Property<string>("descricao")
                        .HasMaxLength(50);

                    b.Property<int>("idDocumentoOrigem");

                    b.Property<int>("idLinhaOrigem");

                    b.Property<string>("notas");

                    b.Property<string>("projecto")
                        .HasMaxLength(15);

                    b.Property<double>("quantPendente");

                    b.Property<double>("quantTrans");

                    b.Property<double>("quantidade");

                    b.Property<int>("status");

                    b.HasKey("id");

                    b.HasIndex("CabecStockId");

                    b.ToTable("LinhasStock");
                });

            modelBuilder.Entity("Intranet.Models.Stock.Projeto", b =>
                {
                    b.Property<string>("codigo")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("descricao");

                    b.HasKey("codigo");

                    b.ToTable("Projeto");
                });

            modelBuilder.Entity("Intranet.Models.Stock.TipoDocumentoStock", b =>
                {
                    b.Property<string>("documento")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5);

                    b.Property<string>("descricao")
                        .HasMaxLength(30);

                    b.Property<string>("tipo")
                        .HasMaxLength(5);

                    b.HasKey("documento");

                    b.ToTable("TipoDocumentoStock");

                    b.HasData(
                        new
                        {
                            documento = "DF",
                            descricao = "Devolução de Ferramentas",
                            tipo = "DF"
                        },
                        new
                        {
                            documento = "SF",
                            descricao = "Saida de Ferramentas",
                            tipo = "SF"
                        },
                        new
                        {
                            documento = "DC",
                            descricao = "Devolução de Consumiveis",
                            tipo = "DC"
                        },
                        new
                        {
                            documento = "SC",
                            descricao = "Saida de Consumiveis",
                            tipo = "SC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Intranet.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("ApplicationUserRole");

                    b.Property<bool>("isSuperAdmin");

                    b.Property<string>("profilePictureUrl");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Intranet.Models.Stock.CabecStock", b =>
                {
                    b.HasOne("Intranet.Models.Stock.TipoDocumentoStock", "Documento")
                        .WithMany()
                        .HasForeignKey("tipodoc");
                });

            modelBuilder.Entity("Intranet.Models.Stock.LinhasStock", b =>
                {
                    b.HasOne("Intranet.Models.Stock.CabecStock")
                        .WithMany("linhas")
                        .HasForeignKey("CabecStockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
